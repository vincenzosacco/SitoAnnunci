-- schema.sql - Used to create the init schema for h2(in memory) database.
-- All objects will be deleted when the application is closed or restarted.

-- RUOLO TABLE ----------
CREATE TABLE ruolo (
   id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
   tipo varchar(50) NOT NULL,
   CONSTRAINT ruolo_nome_key UNIQUE (tipo),
   CONSTRAINT ruolo_pkey PRIMARY KEY (id)
);
-- CATEGORIA IMMOBILE TABLE ----------
CREATE TABLE categoria_immobile (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo varchar(50) NOT NULL,
    CONSTRAINT categoria_immobile_nome_key UNIQUE (tipo),
    CONSTRAINT categoria_immobile_pkey PRIMARY KEY (id)
);

-- UTENTE TABLE ----------
CREATE TABLE utente (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome varchar(100) NOT NULL,
    cellulare varchar(20),
    email varchar(100) NOT NULL,
    "password" text NOT NULL,
    ruolo_id int4 NULL,
    bannato bool DEFAULT false NULL,
    CONSTRAINT utente_email_key UNIQUE (email),
    CONSTRAINT utente_pkey PRIMARY KEY (id)
);

ALTER TABLE utente ADD CONSTRAINT utente_ruolo_id_fkey FOREIGN KEY (ruolo_id) REFERENCES ruolo(id);


-- ANNUNCIO TABLE ----------
CREATE TABLE annuncio (
--       id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      titolo varchar(255) NOT NULL,
      descrizione text NULL,
      prezzo numeric(12, 2) NOT NULL,
      prezzo_asta numeric(12, 2) NULL,
      superficie int4 NOT NULL,
      indirizzo text NOT NULL,
      in_vendita bool DEFAULT true NULL,
      categoria_id int4 NULL,
      venditore_id int4 NULL,
      data_creazione timestamp DEFAULT CURRENT_TIMESTAMP NULL,
      foto text NULL,
      promozione bool NULL
);

-- annuncio foreign keys
ALTER TABLE annuncio ADD CONSTRAINT annuncio_categoria_id_fkey FOREIGN KEY (categoria_id) REFERENCES categoria_immobile(id);
ALTER TABLE annuncio ADD CONSTRAINT annuncio_venditore_id_fkey FOREIGN KEY (venditore_id) REFERENCES utente(id);


-- CONVERSAZIONE TABLE
CREATE TABLE conversazione (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    utente1_id INT NOT NULL,
    utente2_id INT NOT NULL,
    CONSTRAINT uc_conversazione UNIQUE (utente1_id, utente2_id)
);

-- MESSAGGIO TABLE
CREATE TABLE messaggio (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mittente_id INTEGER REFERENCES utente(id),
    destinatario_id INTEGER REFERENCES utente(id),
    testo TEXT NOT NULL,
    data TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
    conversazione_id INT,
    CONSTRAINT messaggio_conversazione_fk FOREIGN KEY (conversazione_id) REFERENCES conversazione(id)
);


CREATE TABLE recensione (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    annuncio_id INTEGER REFERENCES annuncio(id),
    autore_id INTEGER REFERENCES utente(id),
    nome_autore TEXT,
    testo TEXT NOT NULL,
    voto INT,
    data TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL
    CONSTRAINT recensione_voto_check CHECK (((voto >= 1) AND (voto <= 5)))
);


