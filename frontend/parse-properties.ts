// This script reads a properties file and parses it
// to update Angular configuration files and package.json.

import properties from 'properties-parser';
import {existsSync, mkdirSync, readFileSync, writeFileSync} from 'fs';
import {EOL} from 'os';
import path, {dirname} from 'path';
import {fileURLToPath} from 'url';

// Constants
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const PROPERTIES_PATH = path.join(__dirname, '..', 'app.properties');
const ANGULAR_JSON_PATH = path.join(__dirname, 'angular.json');
const ENV_DEV_PATH = path.join(__dirname, 'src', 'environments', 'environment.ts');
const ENV_PROD_PATH = path.join(__dirname, 'src', 'environments', 'environment.prod.ts');

function main() {
  // Read properties file
  const props = properties.parse(readFileSync(PROPERTIES_PATH, 'utf8'));
  // derive additional properties ( just for readability )
  props['backend.api.url'] = `${props['backend.protocol']}://${props['backend.host']}:${props['backend.port']}${props['backend.api.entrypoint']}`;

  // Validate required properties
  validateProperties(props);

  // Update configuration files
  updateAngularJson(props);
  updateEnvironmentFiles(props);
}

function validateProperties(props: properties.Properties) {
  const requiredProps = [
    'frontend.port',
    'backend.api.url'
  ];

  requiredProps.forEach(prop => {
    if (!props[prop]) {
      throw new Error(`Missing '${prop}' property in ${PROPERTIES_PATH}`);
    }
  });
}


function updateAngularJson(props: properties.Properties) {
  const angularJson = JSON.parse(readFileSync(ANGULAR_JSON_PATH, 'utf8'));

  angularJson.projects.frontend.architect.serve.options.port = parseInt(props['frontend.port'], 10);
  writeFileSync(ANGULAR_JSON_PATH, JSON.stringify(angularJson, null, 2), 'utf8');
  console.log(`Updated "${ANGULAR_JSON_PATH}" with serve port: ${props['frontend.port']}`);
}

function updateEnvironmentFiles(props: properties.Properties) {
  const environments = [
    {
      path: ENV_DEV_PATH,
      // content: generateEnvironmentContent(false, props['frontend.mock.api.url'])
      content: generateEnvironmentContent(false, props['backend.api.url'])
    },
    {
      path: ENV_PROD_PATH,
      content: generateEnvironmentContent(true, props['backend.api.url'])
    }
  ];

  environments.forEach(env => {
    ensureDirectoryExist(env.path);
    writeFileSync(env.path, env.content, 'utf8');
  });
  console.log(`Updated :${environments.map(env => '\n\t'+ env.path)}`);
}

function generateEnvironmentContent(isProduction: boolean, serverUrl: any) {
  return `// This file is automatically generated by parse-properties.ts - do not edit manually cause it will be overwritten on next build${EOL}` +
    `// Environment ${isProduction ? 'prod' : 'dev'} configuration for Angular application${EOL}` +
    `export const environment = {${EOL}` +
    `  production: ${isProduction},${EOL}` +
    `  api: {${EOL}` +
    `    serverUrl: '${serverUrl}',${EOL}` +
    `  },${EOL}` +
    `};${EOL}`;
}

function ensureDirectoryExist(filePath: string) {
  const dirname = path.dirname(filePath);
  if (!existsSync(dirname)) {
    mkdirSync(dirname, { recursive: true });
  }
}

main();
